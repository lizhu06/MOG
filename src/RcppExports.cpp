// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _MOG_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// update_gamma1_mb
void update_gamma1_mb(double pi1, double sigma2, int C, int P, Eigen::VectorXi& c_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_gamma1_mb(SEXP pi1SEXP, SEXP sigma2SEXP, SEXP CSEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    update_gamma1_mb(pi1, sigma2, C, P, c_index, gamma_1, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, Y, X);
    return R_NilValue;
END_RCPP
}
// update_gamma2_mb
void update_gamma2_mb(Eigen::VectorXd& pi2_rep_per_group, double sigma2, int G, int P, Eigen::VectorXi& g_index, Eigen::VectorXi& c_index_group, Eigen::VectorXd& m_gc, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_Dk_int, Eigen::VectorXd& weight_for_Dk);
RcppExport SEXP _MOG_update_gamma2_mb(SEXP pi2_rep_per_groupSEXP, SEXP sigma2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP c_index_groupSEXP, SEXP m_gcSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_Dk_intSEXP, SEXP weight_for_DkSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_group(pi2_rep_per_groupSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    update_gamma2_mb(pi2_rep_per_group, sigma2, G, P, g_index, c_index_group, m_gc, gamma_1_rep_per_feature, gamma_2, gamma_2_rep_per_feature, gamma_3, b, Y, X, weight_Dk_int, weight_for_Dk);
    return R_NilValue;
END_RCPP
}
// update_gamma3_mb
void update_gamma3_mb(Eigen::VectorXd& pi3_rep_per_feature, double sigma2, int P, Eigen::VectorXi& c_index, Eigen::VectorXi& g_index, Eigen::VectorXd& m_fg, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_Tj_int, Eigen::VectorXd& weight_for_Tj, int weight_Rj_int, Eigen::VectorXd& weight_for_Rj);
RcppExport SEXP _MOG_update_gamma3_mb(SEXP pi3_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_Tj_intSEXP, SEXP weight_for_TjSEXP, SEXP weight_Rj_intSEXP, SEXP weight_for_RjSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    update_gamma3_mb(pi3_rep_per_feature, sigma2, P, c_index, g_index, m_fg, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, beta, Y, X, weight_Tj_int, weight_for_Tj, weight_Rj_int, weight_for_Rj);
    return R_NilValue;
END_RCPP
}
// update_b_mb
void update_b_mb(Eigen::VectorXd& pi3_rep_per_feature, double sigma2, Eigen::VectorXd& s2_vec, int P, Eigen::VectorXi& c_index, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_s2_int, Eigen::VectorXd& weight_for_s2);
RcppExport SEXP _MOG_update_b_mb(SEXP pi3_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP s2_vecSEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_s2_intSEXP, SEXP weight_for_s2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2_vec(s2_vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    update_b_mb(pi3_rep_per_feature, sigma2, s2_vec, P, c_index, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, beta, Y, X, weight_s2_int, weight_for_s2);
    return R_NilValue;
END_RCPP
}
// update_pi1_mb
double update_pi1_mb(Eigen::VectorXd& gamma_1, double alpha1, double beta1, int C, int G);
RcppExport SEXP _MOG_update_pi1_mb(SEXP gamma_1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP CSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pi1_mb(gamma_1, alpha1, beta1, C, G));
    return rcpp_result_gen;
END_RCPP
}
// update_pi2_mb
void update_pi2_mb(Eigen::VectorXd& gamma_2, Eigen::VectorXd& pi2, Eigen::VectorXi& c_index_group, Eigen::VectorXd& m_gc, double alpha2, double beta2, int C, int G, int weight_Dk_int, Eigen::VectorXd& weight_for_Dk, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi2_mb(SEXP gamma_2SEXP, SEXP pi2SEXP, SEXP c_index_groupSEXP, SEXP m_gcSEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP CSEXP, SEXP GSEXP, SEXP weight_Dk_intSEXP, SEXP weight_for_DkSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi2_mb(gamma_2, pi2, c_index_group, m_gc, alpha2, beta2, C, G, weight_Dk_int, weight_for_Dk, pi2_loglikeli, pi2_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_pi3_mb
void update_pi3_mb(Eigen::VectorXd& gamma_3, Eigen::VectorXd& pi3, Eigen::VectorXi& g_index, Eigen::VectorXd& m_fg, double alpha3, double beta3, int G, int P, int weight_Tj_int, Eigen::VectorXd& weight_for_Tj, int weight_Rj_int, Eigen::VectorXd& weight_for_Rj, Eigen::VectorXd& pi3_loglikeli, double pi3_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi3_mb(SEXP gamma_3SEXP, SEXP pi3SEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP alpha3SEXP, SEXP beta3SEXP, SEXP GSEXP, SEXP PSEXP, SEXP weight_Tj_intSEXP, SEXP weight_for_TjSEXP, SEXP weight_Rj_intSEXP, SEXP weight_for_RjSEXP, SEXP pi3_loglikeliSEXP, SEXP pi3_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3(pi3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_loglikeli(pi3_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi3_prop_n(pi3_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi3_mb(gamma_3, pi3, g_index, m_fg, alpha3, beta3, G, P, weight_Tj_int, weight_for_Tj, weight_Rj_int, weight_for_Rj, pi3_loglikeli, pi3_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_sigma2_mb
double update_sigma2_mb(double N, double alpha_sigma, double beta_sigma, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_sigma2_mb(SEXP NSEXP, SEXP alpha_sigmaSEXP, SEXP beta_sigmaSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_mb(N, alpha_sigma, beta_sigma, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, Y, X));
    return rcpp_result_gen;
END_RCPP
}
// update_s2_mb
void update_s2_mb(int P, double alpha_s, double beta_s, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& b, int weight_s2_int, Eigen::VectorXd& weight_for_s2, Eigen::VectorXd& s2);
RcppExport SEXP _MOG_update_s2_mb(SEXP PSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP bSEXP, SEXP weight_s2_intSEXP, SEXP weight_for_s2SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    update_s2_mb(P, alpha_s, beta_s, uni_types, types, b, weight_s2_int, weight_for_s2, s2);
    return R_NilValue;
END_RCPP
}
// MCMC_mb
Rcpp::List MCMC_mb(int seed, int burnInIter, int keepIter, int C, int G, int P, double N, double alpha1, double alpha2, double alpha3, double alpha_sigma, double alpha_s, double beta1, double beta2, double beta3, double beta_sigma, double beta_s, double pi1, double sigma2, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& m_gc, Eigen::VectorXd& m_fg, Eigen::VectorXi& c_index, Eigen::VectorXi& c_index_group, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& pi2, Eigen::VectorXd& pi2_rep_per_group, Eigen::VectorXd& pi3, Eigen::VectorXd& pi3_rep_per_feature, Eigen::VectorXd& s2, Eigen::VectorXd& Yb, Eigen::MatrixXd& X, int printInt, Eigen::VectorXd& weight_for_s2, Eigen::VectorXd& weight_for_Rj, Eigen::VectorXd& weight_for_Tj, Eigen::VectorXd& weight_for_Dk, int weight_s2_int, int weight_Rj_int, int weight_Tj_int, int weight_Dk_int, Eigen::VectorXd& pi2_loglikeli, Eigen::VectorXd& pi3_loglikeli, double pi2_prop_n, double pi3_prop_n, int MH_ind);
RcppExport SEXP _MOG_MCMC_mb(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP CSEXP, SEXP GSEXP, SEXP PSEXP, SEXP NSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP alpha_sigmaSEXP, SEXP alpha_sSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta_sigmaSEXP, SEXP beta_sSEXP, SEXP pi1SEXP, SEXP sigma2SEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP m_gcSEXP, SEXP m_fgSEXP, SEXP c_indexSEXP, SEXP c_index_groupSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP pi2SEXP, SEXP pi2_rep_per_groupSEXP, SEXP pi3SEXP, SEXP pi3_rep_per_featureSEXP, SEXP s2SEXP, SEXP YbSEXP, SEXP XSEXP, SEXP printIntSEXP, SEXP weight_for_s2SEXP, SEXP weight_for_RjSEXP, SEXP weight_for_TjSEXP, SEXP weight_for_DkSEXP, SEXP weight_s2_intSEXP, SEXP weight_Rj_intSEXP, SEXP weight_Tj_intSEXP, SEXP weight_Dk_intSEXP, SEXP pi2_loglikeliSEXP, SEXP pi3_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP pi3_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_group(pi2_rep_per_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3(pi3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yb(YbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type printInt(printIntSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_loglikeli(pi3_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< double >::type pi3_prop_n(pi3_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_mb(seed, burnInIter, keepIter, C, G, P, N, alpha1, alpha2, alpha3, alpha_sigma, alpha_s, beta1, beta2, beta3, beta_sigma, beta_s, pi1, sigma2, uni_types, types, m_gc, m_fg, c_index, c_index_group, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, gamma_2_rep_per_feature, gamma_3, b, pi2, pi2_rep_per_group, pi3, pi3_rep_per_feature, s2, Yb, X, printInt, weight_for_s2, weight_for_Rj, weight_for_Tj, weight_for_Dk, weight_s2_int, weight_Rj_int, weight_Tj_int, weight_Dk_int, pi2_loglikeli, pi3_loglikeli, pi2_prop_n, pi3_prop_n, MH_ind));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _MOG_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// update_gamma1_mc
void update_gamma1_mc(double pi1, double sigma2, int C, int P, Eigen::VectorXi& c_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_gamma1_mc(SEXP pi1SEXP, SEXP sigma2SEXP, SEXP CSEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    update_gamma1_mc(pi1, sigma2, C, P, c_index, gamma_1, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, Y, X);
    return R_NilValue;
END_RCPP
}
// update_gamma2_mc
void update_gamma2_mc(Eigen::VectorXd& pi2_rep_per_group, double sigma2, int G, int P, Eigen::VectorXi& g_index, Eigen::VectorXi& c_index_group, Eigen::VectorXd& m_gc, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_Dk_int, Eigen::VectorXd& weight_for_Dk);
RcppExport SEXP _MOG_update_gamma2_mc(SEXP pi2_rep_per_groupSEXP, SEXP sigma2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP c_index_groupSEXP, SEXP m_gcSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_Dk_intSEXP, SEXP weight_for_DkSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_group(pi2_rep_per_groupSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    update_gamma2_mc(pi2_rep_per_group, sigma2, G, P, g_index, c_index_group, m_gc, gamma_1_rep_per_feature, gamma_2, gamma_2_rep_per_feature, gamma_3, b, Y, X, weight_Dk_int, weight_for_Dk);
    return R_NilValue;
END_RCPP
}
// update_gamma3_mc
void update_gamma3_mc(Eigen::VectorXd& pi3_rep_per_feature, double sigma2, int P, Eigen::VectorXi& c_index, Eigen::VectorXi& g_index, Eigen::VectorXd& m_fg, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_Tj_int, Eigen::VectorXd& weight_for_Tj, int weight_Rj_int, Eigen::VectorXd& weight_for_Rj);
RcppExport SEXP _MOG_update_gamma3_mc(SEXP pi3_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_Tj_intSEXP, SEXP weight_for_TjSEXP, SEXP weight_Rj_intSEXP, SEXP weight_for_RjSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    update_gamma3_mc(pi3_rep_per_feature, sigma2, P, c_index, g_index, m_fg, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, beta, Y, X, weight_Tj_int, weight_for_Tj, weight_Rj_int, weight_for_Rj);
    return R_NilValue;
END_RCPP
}
// update_b_mc
void update_b_mc(Eigen::VectorXd& pi3_rep_per_feature, double sigma2, Eigen::VectorXd& s2_vec, int P, Eigen::VectorXi& c_index, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int weight_s2_int, Eigen::VectorXd& weight_for_s2);
RcppExport SEXP _MOG_update_b_mc(SEXP pi3_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP s2_vecSEXP, SEXP PSEXP, SEXP c_indexSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP weight_s2_intSEXP, SEXP weight_for_s2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2_vec(s2_vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    update_b_mc(pi3_rep_per_feature, sigma2, s2_vec, P, c_index, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, b, beta, Y, X, weight_s2_int, weight_for_s2);
    return R_NilValue;
END_RCPP
}
// update_pi1_mc
double update_pi1_mc(Eigen::VectorXd& gamma_1, double alpha1, double beta1, int C, int G);
RcppExport SEXP _MOG_update_pi1_mc(SEXP gamma_1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP CSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pi1_mc(gamma_1, alpha1, beta1, C, G));
    return rcpp_result_gen;
END_RCPP
}
// update_pi2_mc
void update_pi2_mc(Eigen::VectorXd& gamma_2, Eigen::VectorXd& pi2, Eigen::VectorXi& c_index_group, Eigen::VectorXd& m_gc, double alpha2, double beta2, int C, int G, int weight_Dk_int, Eigen::VectorXd& weight_for_Dk, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi2_mc(SEXP gamma_2SEXP, SEXP pi2SEXP, SEXP c_index_groupSEXP, SEXP m_gcSEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP CSEXP, SEXP GSEXP, SEXP weight_Dk_intSEXP, SEXP weight_for_DkSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi2_mc(gamma_2, pi2, c_index_group, m_gc, alpha2, beta2, C, G, weight_Dk_int, weight_for_Dk, pi2_loglikeli, pi2_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_pi3_mc
void update_pi3_mc(Eigen::VectorXd& gamma_3, Eigen::VectorXd& pi3, Eigen::VectorXi& g_index, Eigen::VectorXd& m_fg, double alpha3, double beta3, int G, int P, int weight_Tj_int, Eigen::VectorXd& weight_for_Tj, int weight_Rj_int, Eigen::VectorXd& weight_for_Rj, Eigen::VectorXd& pi3_loglikeli, double pi3_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi3_mc(SEXP gamma_3SEXP, SEXP pi3SEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP alpha3SEXP, SEXP beta3SEXP, SEXP GSEXP, SEXP PSEXP, SEXP weight_Tj_intSEXP, SEXP weight_for_TjSEXP, SEXP weight_Rj_intSEXP, SEXP weight_for_RjSEXP, SEXP pi3_loglikeliSEXP, SEXP pi3_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3(pi3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_loglikeli(pi3_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi3_prop_n(pi3_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi3_mc(gamma_3, pi3, g_index, m_fg, alpha3, beta3, G, P, weight_Tj_int, weight_for_Tj, weight_Rj_int, weight_for_Rj, pi3_loglikeli, pi3_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_sigma2_mc
double update_sigma2_mc(double N, double alpha_sigma, double beta_sigma, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_sigma2_mc(SEXP NSEXP, SEXP alpha_sigmaSEXP, SEXP beta_sigmaSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_mc(N, alpha_sigma, beta_sigma, gamma_1_rep_per_feature, gamma_2_rep_per_feature, gamma_3, beta, Y, X));
    return rcpp_result_gen;
END_RCPP
}
// update_s2_mc
void update_s2_mc(int P, double alpha_s, double beta_s, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& b, int weight_s2_int, Eigen::VectorXd& weight_for_s2, Eigen::VectorXd& s2);
RcppExport SEXP _MOG_update_s2_mc(SEXP PSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP bSEXP, SEXP weight_s2_intSEXP, SEXP weight_for_s2SEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    update_s2_mc(P, alpha_s, beta_s, uni_types, types, b, weight_s2_int, weight_for_s2, s2);
    return R_NilValue;
END_RCPP
}
// MCMC_mc
Rcpp::List MCMC_mc(int seed, int burnInIter, int keepIter, int C, int G, int P, double N, double alpha1, double alpha2, double alpha3, double alpha_sigma, double alpha_s, double beta1, double beta2, double beta3, double beta_sigma, double beta_s, double pi1, double sigma2, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& m_gc, Eigen::VectorXd& m_fg, Eigen::VectorXi& c_index, Eigen::VectorXi& c_index_group, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& gamma_2_rep_per_feature, Eigen::VectorXd& gamma_3, Eigen::VectorXd& b, Eigen::VectorXd& pi2, Eigen::VectorXd& pi2_rep_per_group, Eigen::VectorXd& pi3, Eigen::VectorXd& pi3_rep_per_feature, Eigen::VectorXd& s2, Eigen::VectorXd& Y, Eigen::MatrixXd& X, int print_int, Eigen::VectorXd& weight_for_s2, Eigen::VectorXd& weight_for_Rj, Eigen::VectorXd& weight_for_Tj, Eigen::VectorXd& weight_for_Dk, int weight_s2_int, int weight_Rj_int, int weight_Tj_int, int weight_Dk_int, Eigen::VectorXd& pi2_loglikeli, Eigen::VectorXd& pi3_loglikeli, double pi2_prop_n, double pi3_prop_n, int MH_ind);
RcppExport SEXP _MOG_MCMC_mc(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP CSEXP, SEXP GSEXP, SEXP PSEXP, SEXP NSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha3SEXP, SEXP alpha_sigmaSEXP, SEXP alpha_sSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta3SEXP, SEXP beta_sigmaSEXP, SEXP beta_sSEXP, SEXP pi1SEXP, SEXP sigma2SEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP m_gcSEXP, SEXP m_fgSEXP, SEXP c_indexSEXP, SEXP c_index_groupSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP gamma_2_rep_per_featureSEXP, SEXP gamma_3SEXP, SEXP bSEXP, SEXP pi2SEXP, SEXP pi2_rep_per_groupSEXP, SEXP pi3SEXP, SEXP pi3_rep_per_featureSEXP, SEXP s2SEXP, SEXP YSEXP, SEXP XSEXP, SEXP print_intSEXP, SEXP weight_for_s2SEXP, SEXP weight_for_RjSEXP, SEXP weight_for_TjSEXP, SEXP weight_for_DkSEXP, SEXP weight_s2_intSEXP, SEXP weight_Rj_intSEXP, SEXP weight_Tj_intSEXP, SEXP weight_Dk_intSEXP, SEXP pi2_loglikeliSEXP, SEXP pi3_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP pi3_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha3(alpha3SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type beta3(beta3SEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_gc(m_gcSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index(c_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type c_index_group(c_index_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2_rep_per_feature(gamma_2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_3(gamma_3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_group(pi2_rep_per_groupSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3(pi3SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_rep_per_feature(pi3_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type print_int(print_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_s2(weight_for_s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Rj(weight_for_RjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Tj(weight_for_TjSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type weight_for_Dk(weight_for_DkSEXP);
    Rcpp::traits::input_parameter< int >::type weight_s2_int(weight_s2_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Rj_int(weight_Rj_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Tj_int(weight_Tj_intSEXP);
    Rcpp::traits::input_parameter< int >::type weight_Dk_int(weight_Dk_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi3_loglikeli(pi3_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< double >::type pi3_prop_n(pi3_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_mc(seed, burnInIter, keepIter, C, G, P, N, alpha1, alpha2, alpha3, alpha_sigma, alpha_s, beta1, beta2, beta3, beta_sigma, beta_s, pi1, sigma2, uni_types, types, m_gc, m_fg, c_index, c_index_group, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, gamma_2_rep_per_feature, gamma_3, b, pi2, pi2_rep_per_group, pi3, pi3_rep_per_feature, s2, Y, X, print_int, weight_for_s2, weight_for_Rj, weight_for_Tj, weight_for_Dk, weight_s2_int, weight_Rj_int, weight_Tj_int, weight_Dk_int, pi2_loglikeli, pi3_loglikeli, pi2_prop_n, pi3_prop_n, MH_ind));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _MOG_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// update_gamma1_sb
void update_gamma1_sb(double pi1, double sigma2, int G, int P, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_gamma1_sb(SEXP pi1SEXP, SEXP sigma2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    update_gamma1_sb(pi1, sigma2, G, P, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, b, Y, X);
    return R_NilValue;
END_RCPP
}
// update_gamma2_sb
void update_gamma2_sb(Eigen::VectorXd& pi2_rep_per_feature, double sigma2, int P, Eigen::VectorXi& g_index, Eigen::VectorXi& m_fg, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& v_weight, int pi2_weighted_int);
RcppExport SEXP _MOG_update_gamma2_sb(SEXP pi2_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP v_weightSEXP, SEXP pi2_weighted_intSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< int >::type pi2_weighted_int(pi2_weighted_intSEXP);
    update_gamma2_sb(pi2_rep_per_feature, sigma2, P, g_index, m_fg, gamma_1_rep_per_feature, gamma_2, b, beta, Y, X, v_weight, pi2_weighted_int);
    return R_NilValue;
END_RCPP
}
// update_b_sb
void update_b_sb(Eigen::VectorXd& pi2_rep_per_feature, double sigma2, Eigen::VectorXd& s2_vec, int P, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& w_weight);
RcppExport SEXP _MOG_update_b_sb(SEXP pi2_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP s2_vecSEXP, SEXP PSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP, SEXP w_weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2_vec(s2_vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    update_b_sb(pi2_rep_per_feature, sigma2, s2_vec, P, gamma_1_rep_per_feature, gamma_2, b, Y, X, w_weight);
    return R_NilValue;
END_RCPP
}
// update_pi1_sb
double update_pi1_sb(Eigen::VectorXd& gamma_1, double alpha1, double beta1, int G);
RcppExport SEXP _MOG_update_pi1_sb(SEXP gamma_1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pi1_sb(gamma_1, alpha1, beta1, G));
    return rcpp_result_gen;
END_RCPP
}
// update_pi2_sb
void update_pi2_sb(Eigen::VectorXd& gamma_2, Eigen::VectorXd& pi2, Eigen::VectorXi& g_index, Eigen::VectorXi& m_fg, double alpha2, double beta2, int G, int P, Eigen::VectorXd& v_weight, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi2_sb(SEXP gamma_2SEXP, SEXP pi2SEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP v_weightSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi2_sb(gamma_2, pi2, g_index, m_fg, alpha2, beta2, G, P, v_weight, pi2_loglikeli, pi2_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_sigma2_sb
double update_sigma2_sb(double N, double alpha_sigma, double beta_sigma, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_sigma2_sb(SEXP NSEXP, SEXP alpha_sigmaSEXP, SEXP beta_sigmaSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_sb(N, alpha_sigma, beta_sigma, gamma_1_rep_per_feature, gamma_2, b, Y, X));
    return rcpp_result_gen;
END_RCPP
}
// update_s2_sb
void update_s2_sb(int P, double alpha_s, double beta_s, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& b, Eigen::VectorXd& s2, Eigen::VectorXd& w_weight);
RcppExport SEXP _MOG_update_s2_sb(SEXP PSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP bSEXP, SEXP s2SEXP, SEXP w_weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    update_s2_sb(P, alpha_s, beta_s, uni_types, types, b, s2, w_weight);
    return R_NilValue;
END_RCPP
}
// MCMC_sb
Rcpp::List MCMC_sb(int seed, int burnInIter, int keepIter, int G, int P, int printInt, double N, double alpha1, double alpha2, double alpha_sigma, double alpha_s, double beta1, double beta2, double beta_sigma, double beta_s, double pi1, double sigma2, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& m_fg, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& pi2, Eigen::VectorXd& pi2_rep_per_feature, Eigen::VectorXd& s2, Eigen::VectorXd& Yb, Eigen::MatrixXd& X, Eigen::VectorXd& w_weight, Eigen::VectorXd& v_weight, int pi2_weighted_int, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_MCMC_sb(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP GSEXP, SEXP PSEXP, SEXP printIntSEXP, SEXP NSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha_sigmaSEXP, SEXP alpha_sSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta_sigmaSEXP, SEXP beta_sSEXP, SEXP pi1SEXP, SEXP sigma2SEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP m_fgSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP pi2SEXP, SEXP pi2_rep_per_featureSEXP, SEXP s2SEXP, SEXP YbSEXP, SEXP XSEXP, SEXP w_weightSEXP, SEXP v_weightSEXP, SEXP pi2_weighted_intSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type printInt(printIntSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Yb(YbSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< int >::type pi2_weighted_int(pi2_weighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_sb(seed, burnInIter, keepIter, G, P, printInt, N, alpha1, alpha2, alpha_sigma, alpha_s, beta1, beta2, beta_sigma, beta_s, pi1, sigma2, uni_types, types, m_fg, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, b, pi2, pi2_rep_per_feature, s2, Yb, X, w_weight, v_weight, pi2_weighted_int, pi2_loglikeli, pi2_prop_n, MH_ind));
    return rcpp_result_gen;
END_RCPP
}
// set_seed
void set_seed(unsigned int seed);
RcppExport SEXP _MOG_set_seed(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< unsigned int >::type seed(seedSEXP);
    set_seed(seed);
    return R_NilValue;
END_RCPP
}
// update_gamma1_sc
void update_gamma1_sc(double pi1, double sigma2, int G, int P, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_gamma1_sc(SEXP pi1SEXP, SEXP sigma2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    update_gamma1_sc(pi1, sigma2, G, P, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, b, Y, X);
    return R_NilValue;
END_RCPP
}
// update_gamma2_sc
void update_gamma2_sc(Eigen::VectorXd& pi2_rep_per_feature, double sigma2, int P, Eigen::VectorXi& g_index, Eigen::VectorXi& m_fg, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& v_weight, int BernoulliWeighted_int);
RcppExport SEXP _MOG_update_gamma2_sc(SEXP pi2_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP PSEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP v_weightSEXP, SEXP BernoulliWeighted_intSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    update_gamma2_sc(pi2_rep_per_feature, sigma2, P, g_index, m_fg, gamma_1_rep_per_feature, gamma_2, b, beta, Y, X, v_weight, BernoulliWeighted_int);
    return R_NilValue;
END_RCPP
}
// update_b_sc
void update_b_sc(Eigen::VectorXd& pi2_rep_per_feature, double sigma2, Eigen::VectorXd& s2_vec, int P, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& w_weight);
RcppExport SEXP _MOG_update_b_sc(SEXP pi2_rep_per_featureSEXP, SEXP sigma2SEXP, SEXP s2_vecSEXP, SEXP PSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP, SEXP w_weightSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2_vec(s2_vecSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    update_b_sc(pi2_rep_per_feature, sigma2, s2_vec, P, gamma_1_rep_per_feature, gamma_2, b, beta, Y, X, w_weight);
    return R_NilValue;
END_RCPP
}
// update_pi1_sc
double update_pi1_sc(Eigen::VectorXd& gamma_1, double alpha1, double beta1, int G);
RcppExport SEXP _MOG_update_pi1_sc(SEXP gamma_1SEXP, SEXP alpha1SEXP, SEXP beta1SEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(update_pi1_sc(gamma_1, alpha1, beta1, G));
    return rcpp_result_gen;
END_RCPP
}
// update_pi2_sc
void update_pi2_sc(Eigen::VectorXd& gamma_2, Eigen::VectorXd& pi2, Eigen::VectorXi& g_index, Eigen::VectorXi& m_fg, double alpha2, double beta2, int G, int P, Eigen::VectorXd& v_weight, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_update_pi2_sc(SEXP gamma_2SEXP, SEXP pi2SEXP, SEXP g_indexSEXP, SEXP m_fgSEXP, SEXP alpha2SEXP, SEXP beta2SEXP, SEXP GSEXP, SEXP PSEXP, SEXP v_weightSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    update_pi2_sc(gamma_2, pi2, g_index, m_fg, alpha2, beta2, G, P, v_weight, pi2_loglikeli, pi2_prop_n, MH_ind);
    return R_NilValue;
END_RCPP
}
// update_sigma2_sc
double update_sigma2_sc(double N, double alpha_sigma, double beta_sigma, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& beta, Eigen::VectorXd& Y, Eigen::MatrixXd& X);
RcppExport SEXP _MOG_update_sigma2_sc(SEXP NSEXP, SEXP alpha_sigmaSEXP, SEXP beta_sigmaSEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP betaSEXP, SEXP YSEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma2_sc(N, alpha_sigma, beta_sigma, gamma_1_rep_per_feature, gamma_2, beta, Y, X));
    return rcpp_result_gen;
END_RCPP
}
// update_s2_sc
void update_s2_sc(int P, double alpha_s, double beta_s, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXd& b, Eigen::VectorXd& w_weight, Eigen::VectorXd& s2);
RcppExport SEXP _MOG_update_s2_sc(SEXP PSEXP, SEXP alpha_sSEXP, SEXP beta_sSEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP bSEXP, SEXP w_weightSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    update_s2_sc(P, alpha_s, beta_s, uni_types, types, b, w_weight, s2);
    return R_NilValue;
END_RCPP
}
// MCMC_sc
Rcpp::List MCMC_sc(int seed, int burnInIter, int keepIter, int G, int P, int printInt, double N, double alpha1, double alpha2, double alpha_sigma, double alpha_s, double beta1, double beta2, double beta_sigma, double beta_s, double pi1, double sigma2, Eigen::VectorXi& uni_types, Eigen::VectorXi& types, Eigen::VectorXi& m_fg, Eigen::VectorXi& g_index, Eigen::VectorXd& gamma_1, Eigen::VectorXd& gamma_1_rep_per_feature, Eigen::VectorXd& gamma_2, Eigen::VectorXd& b, Eigen::VectorXd& pi2, Eigen::VectorXd& pi2_rep_per_feature, Eigen::VectorXd& s2, Eigen::VectorXd& Y, Eigen::MatrixXd& X, Eigen::VectorXd& w_weight, Eigen::VectorXd& v_weight, int s2Weighted_int, int BernoulliWeighted_int, Eigen::VectorXd& pi2_loglikeli, double pi2_prop_n, int MH_ind);
RcppExport SEXP _MOG_MCMC_sc(SEXP seedSEXP, SEXP burnInIterSEXP, SEXP keepIterSEXP, SEXP GSEXP, SEXP PSEXP, SEXP printIntSEXP, SEXP NSEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP alpha_sigmaSEXP, SEXP alpha_sSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta_sigmaSEXP, SEXP beta_sSEXP, SEXP pi1SEXP, SEXP sigma2SEXP, SEXP uni_typesSEXP, SEXP typesSEXP, SEXP m_fgSEXP, SEXP g_indexSEXP, SEXP gamma_1SEXP, SEXP gamma_1_rep_per_featureSEXP, SEXP gamma_2SEXP, SEXP bSEXP, SEXP pi2SEXP, SEXP pi2_rep_per_featureSEXP, SEXP s2SEXP, SEXP YSEXP, SEXP XSEXP, SEXP w_weightSEXP, SEXP v_weightSEXP, SEXP s2Weighted_intSEXP, SEXP BernoulliWeighted_intSEXP, SEXP pi2_loglikeliSEXP, SEXP pi2_prop_nSEXP, SEXP MH_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type burnInIter(burnInIterSEXP);
    Rcpp::traits::input_parameter< int >::type keepIter(keepIterSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type P(PSEXP);
    Rcpp::traits::input_parameter< int >::type printInt(printIntSEXP);
    Rcpp::traits::input_parameter< double >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< double >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_sigma(alpha_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_s(alpha_sSEXP);
    Rcpp::traits::input_parameter< double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< double >::type beta_sigma(beta_sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_s(beta_sSEXP);
    Rcpp::traits::input_parameter< double >::type pi1(pi1SEXP);
    Rcpp::traits::input_parameter< double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type uni_types(uni_typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type types(typesSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type m_fg(m_fgSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXi& >::type g_index(g_indexSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1(gamma_1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_1_rep_per_feature(gamma_1_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type gamma_2(gamma_2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2(pi2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_rep_per_feature(pi2_rep_per_featureSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type s2(s2SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type w_weight(w_weightSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type v_weight(v_weightSEXP);
    Rcpp::traits::input_parameter< int >::type s2Weighted_int(s2Weighted_intSEXP);
    Rcpp::traits::input_parameter< int >::type BernoulliWeighted_int(BernoulliWeighted_intSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type pi2_loglikeli(pi2_loglikeliSEXP);
    Rcpp::traits::input_parameter< double >::type pi2_prop_n(pi2_prop_nSEXP);
    Rcpp::traits::input_parameter< int >::type MH_ind(MH_indSEXP);
    rcpp_result_gen = Rcpp::wrap(MCMC_sc(seed, burnInIter, keepIter, G, P, printInt, N, alpha1, alpha2, alpha_sigma, alpha_s, beta1, beta2, beta_sigma, beta_s, pi1, sigma2, uni_types, types, m_fg, g_index, gamma_1, gamma_1_rep_per_feature, gamma_2, b, pi2, pi2_rep_per_feature, s2, Y, X, w_weight, v_weight, s2Weighted_int, BernoulliWeighted_int, pi2_loglikeli, pi2_prop_n, MH_ind));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_hello_world
Eigen::MatrixXd rcppeigen_hello_world();
RcppExport SEXP _MOG_rcppeigen_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcppeigen_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_outerproduct
Eigen::MatrixXd rcppeigen_outerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _MOG_rcppeigen_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_innerproduct
double rcppeigen_innerproduct(const Eigen::VectorXd& x);
RcppExport SEXP _MOG_rcppeigen_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcppeigen_bothproducts
Rcpp::List rcppeigen_bothproducts(const Eigen::VectorXd& x);
RcppExport SEXP _MOG_rcppeigen_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcppeigen_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_MOG_set_seed", (DL_FUNC) &_MOG_set_seed, 1},
    {"_MOG_update_gamma1_mb", (DL_FUNC) &_MOG_update_gamma1_mb, 12},
    {"_MOG_update_gamma2_mb", (DL_FUNC) &_MOG_update_gamma2_mb, 16},
    {"_MOG_update_gamma3_mb", (DL_FUNC) &_MOG_update_gamma3_mb, 17},
    {"_MOG_update_b_mb", (DL_FUNC) &_MOG_update_b_mb, 14},
    {"_MOG_update_pi1_mb", (DL_FUNC) &_MOG_update_pi1_mb, 5},
    {"_MOG_update_pi2_mb", (DL_FUNC) &_MOG_update_pi2_mb, 13},
    {"_MOG_update_pi3_mb", (DL_FUNC) &_MOG_update_pi3_mb, 15},
    {"_MOG_update_sigma2_mb", (DL_FUNC) &_MOG_update_sigma2_mb, 9},
    {"_MOG_update_s2_mb", (DL_FUNC) &_MOG_update_s2_mb, 9},
    {"_MOG_MCMC_mb", (DL_FUNC) &_MOG_MCMC_mb, 53},
    {"_MOG_set_seed", (DL_FUNC) &_MOG_set_seed, 1},
    {"_MOG_update_gamma1_mc", (DL_FUNC) &_MOG_update_gamma1_mc, 12},
    {"_MOG_update_gamma2_mc", (DL_FUNC) &_MOG_update_gamma2_mc, 16},
    {"_MOG_update_gamma3_mc", (DL_FUNC) &_MOG_update_gamma3_mc, 17},
    {"_MOG_update_b_mc", (DL_FUNC) &_MOG_update_b_mc, 14},
    {"_MOG_update_pi1_mc", (DL_FUNC) &_MOG_update_pi1_mc, 5},
    {"_MOG_update_pi2_mc", (DL_FUNC) &_MOG_update_pi2_mc, 13},
    {"_MOG_update_pi3_mc", (DL_FUNC) &_MOG_update_pi3_mc, 15},
    {"_MOG_update_sigma2_mc", (DL_FUNC) &_MOG_update_sigma2_mc, 9},
    {"_MOG_update_s2_mc", (DL_FUNC) &_MOG_update_s2_mc, 9},
    {"_MOG_MCMC_mc", (DL_FUNC) &_MOG_MCMC_mc, 53},
    {"_MOG_set_seed", (DL_FUNC) &_MOG_set_seed, 1},
    {"_MOG_update_gamma1_sb", (DL_FUNC) &_MOG_update_gamma1_sb, 11},
    {"_MOG_update_gamma2_sb", (DL_FUNC) &_MOG_update_gamma2_sb, 13},
    {"_MOG_update_b_sb", (DL_FUNC) &_MOG_update_b_sb, 10},
    {"_MOG_update_pi1_sb", (DL_FUNC) &_MOG_update_pi1_sb, 4},
    {"_MOG_update_pi2_sb", (DL_FUNC) &_MOG_update_pi2_sb, 12},
    {"_MOG_update_sigma2_sb", (DL_FUNC) &_MOG_update_sigma2_sb, 8},
    {"_MOG_update_s2_sb", (DL_FUNC) &_MOG_update_s2_sb, 8},
    {"_MOG_MCMC_sb", (DL_FUNC) &_MOG_MCMC_sb, 36},
    {"_MOG_set_seed", (DL_FUNC) &_MOG_set_seed, 1},
    {"_MOG_update_gamma1_sc", (DL_FUNC) &_MOG_update_gamma1_sc, 11},
    {"_MOG_update_gamma2_sc", (DL_FUNC) &_MOG_update_gamma2_sc, 13},
    {"_MOG_update_b_sc", (DL_FUNC) &_MOG_update_b_sc, 11},
    {"_MOG_update_pi1_sc", (DL_FUNC) &_MOG_update_pi1_sc, 4},
    {"_MOG_update_pi2_sc", (DL_FUNC) &_MOG_update_pi2_sc, 12},
    {"_MOG_update_sigma2_sc", (DL_FUNC) &_MOG_update_sigma2_sc, 8},
    {"_MOG_update_s2_sc", (DL_FUNC) &_MOG_update_s2_sc, 8},
    {"_MOG_MCMC_sc", (DL_FUNC) &_MOG_MCMC_sc, 37},
    {"_MOG_rcppeigen_hello_world", (DL_FUNC) &_MOG_rcppeigen_hello_world, 0},
    {"_MOG_rcppeigen_outerproduct", (DL_FUNC) &_MOG_rcppeigen_outerproduct, 1},
    {"_MOG_rcppeigen_innerproduct", (DL_FUNC) &_MOG_rcppeigen_innerproduct, 1},
    {"_MOG_rcppeigen_bothproducts", (DL_FUNC) &_MOG_rcppeigen_bothproducts, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_MOG(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
